generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model boats {
  id        Int           @id @default(autoincrement())
  name      String?       @db.VarChar(255)
  sailno    String?       @db.VarChar(255)
  classid   Int?
  clubid    Int?
  class     Renamedclass? @relation("boatsToclass", fields: [classid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  clubs     clubs?        @relation(fields: [clubid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  raceboats raceboats[]
}

/// This model has been renamed to 'Renamedclass' during introspection, because the original name 'class' is reserved.
model Renamedclass {
  id    Int     @id @default(autoincrement())
  name  String? @db.VarChar(255)
  boats boats[] @relation("boatsToclass")
  races races[] @relation("classToraces")

  @@map("class")
}

model clubs {
  id    Int     @id @default(autoincrement())
  name  String? @db.VarChar(255)
  boats boats[]
}

model events {
  id          Int       @id @default(autoincrement())
  eventtypeid Int?
  starttime   DateTime? @db.Timestamp(6)
  enddate     DateTime? @db.Timestamp(6)
  name        String?   @db.VarChar(255)
  clubid      Int?
  description String?   @db.VarChar(255)
  races       races[]
}

model eventtypes {
  id   Int     @id @default(autoincrement())
  name String? @db.VarChar(255)
}

model flyway_schema_history {
  installed_rank Int      @id(map: "flyway_schema_history_pk")
  version        String?  @db.VarChar(50)
  description    String   @db.VarChar(200)
  type           String   @db.VarChar(20)
  script         String   @db.VarChar(1000)
  checksum       Int?
  installed_by   String   @db.VarChar(100)
  installed_on   DateTime @default(now()) @db.Timestamp(6)
  execution_time Int
  success        Boolean

  @@index([success], map: "flyway_schema_history_s_idx")
}

model raceboats {
  id         Int       @id @default(autoincrement())
  raceid     Int?
  boatid     Int?
  starttime  DateTime? @db.Timestamp(6)
  finishtime DateTime? @db.Timestamp(6)
  position   Int?
  boats      boats?    @relation(fields: [boatid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  races      races?    @relation(fields: [raceid], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model races {
  id        Int           @id @default(autoincrement())
  eventid   Int?
  starttime DateTime?     @db.Timestamp(6)
  classid   Int?
  class     Renamedclass? @relation("classToraces", fields: [classid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  events    events?       @relation(fields: [eventid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  raceboats raceboats[]
}

model role {
  id   Int     @id @default(autoincrement())
  name String? @db.VarChar(255)
  user user[]
}

model user {
  id       Int     @id @default(autoincrement())
  email    String? @unique @db.VarChar(255)
  password String? @db.VarChar(255)
  roleid   Int?
  role     role?   @relation(fields: [roleid], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
